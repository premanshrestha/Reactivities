{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/common/form/MyTextArea.tsx","app/common/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFounc.tsx","features/errors/ServerError.tsx","app/models/modalContainer.tsx","features/profiles/ProfileFollowing.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","sleep","delay","Promise","resolve","setTimeout","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","UploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowing","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","setPagingParams","loadActivities","axiosParams","result","forEach","setActivity","setPagination","setIntialLoading","console","log","loadActivity","getActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","set","state","createActivity","attendee","newActivity","runInAction","updateActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","URLSearchParams","toString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","uploadPhoto","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","reaction","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setItem","setAppLoaded","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","LoadingComponent","Dimmer","active","Loader","ActivityFilters","vertical","size","width","marginTop","Header","attached","color","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupActivities","group","sub","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","disabled","isLoggedIn","RegisterForm","MyTextArea","MySelectInput","helpers","Select","clearable","options","value","onChange","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","minHeight","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileContent","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","Divider","location","useLocation","finally","hideProgressBar","path","component","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","LoginForm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.3282b721.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number ;\n    itemsPerPage: number ;\n    totalItems : number ;\n    totalPages: number ;\n}\nexport class PaginatedResult <T> {\n    data:T;\n    pagination : Pagination;\n    constructor(data: T, pagination: Pagination){\n        this.data = data;\n        this.pagination= pagination;\n    }\n}\nexport class PagingParams{\n    pageNumber;\n    pageSize;\n    constructor(pageNumber=1 , pageSize=2){\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\n\nimport { toast } from 'react-toastify';\n\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Profile } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n//For Token  at first after login\naxios.interceptors.request.use(config => {\n    const token= store.commonStore.token;\n    if(token) config.headers.Authorization =`Bearer ${token}`\n    return config;\n});\n\n\n\nconst sleep =(delay:number) =>{\n    return new Promise ((resolve)=>{\n        setTimeout(resolve,delay)\n    })\n} \naxios.interceptors.response.use (async response=>{\n    if(process.env.NODE_ENV==='development') await sleep(1000);\n        await sleep(1000);\n        const pagination = response.headers['pagination'];\n        if(pagination)\n        {\n            response.data = new PaginatedResult (response.data, JSON.parse(pagination));\n            return response as AxiosResponse<PaginatedResult<any>>\n        }\n        return response;\n\n},(error : AxiosError)=> {\n    const {data,status,config} = error.response !;\n    switch(status){\n        case 400:\n            if(typeof data==='string'){\n                toast.error(data)\n            }\n            if(config.method==='get' && data.errors.hasOwnProperty('id')){\n                history.push('/not-found');\n            }\n            if(data.errors)\n            {\n                const modalStateErrors=[];\n                for(const key in data.errors)\n                {\n                    if(data.errors[key])\n                    {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n\n            }\n            break;\n            case 401:\n            toast.error('unauthorised');\n            break;\n            case 404:\n        history.push('/not-found')\n            break;\n            case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error')\n            break;\n            \n    }\n    return Promise.reject(error);\n}\n)\nconst responseBody = <T> (response: AxiosResponse <T>) => response.data;\nconst requests ={\n    get:<T>(url:string) => axios.get<T>(url).then(responseBody),\n    post:<T>(url:string,body:{}) => axios.post<T>(url,body).then(responseBody),\n    put:<T>(url:string, body:{}) => axios.put<T>(url,body).then(responseBody),\n    del:<T>(url:string) => axios.delete<T>(url).then(responseBody),\n}\nconst Activities = {\n    list:(params:URLSearchParams) => axios.get<PaginatedResult<Activity[]>>\n    ('/activities',{params})\n    .then(responseBody),\n    details:(id: string ) => requests.get<Activity>(`/activities/${id}`),\n    create:(activity: ActivityFormValues) => requests.post<void>('/activities',activity),\n    update:(activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`,activity),\n    delete:(id: string ) => requests.del<void>(`/activities/${id}`),\n    attend : (id : string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\nconst Account ={\n    current: () => requests.get<User>('/account'),\n    login:(user:UserFormValues) => requests.post<User>('/account/login',user),\n    register:(user:UserFormValues) => requests.post<User>('/account/register',user)\n}\nconst Profiles ={\n    get: (username:string) => requests.get<Profile>(`/profiles/${username}`),\n    UploadPhoto:(file:Blob) => {\n        let formData = new FormData();\n        formData.append('File',file);\n        return axios.post('photos',formData,{\n            headers :{'Content-type' : 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string ) => requests.post(`/photos/${id}/setMain`,{}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile:(profile: Partial<Profile>) => requests.put(`/profiles`,profile),\n    updateFollowing:(username : string) => requests.post(`/follow/${username}`,{}),\n    listFollowing : (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`)\n\n}\nconst agent ={\n    Activities,\n    Account,\n    Profiles\n}\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n        id: string;\n        title: string;\n        date: Date | null;\n        description: string;\n        category: string;\n        city: string;\n        venue: string;\n         hostUsername: string;\n         isCancelled : boolean;\n         isGoing : boolean;\n         isHost  : boolean;\n         host ? : Profile;\n         attendees: Profile[]\n    } \n    export class Activity implements Activity {\n            constructor (init? : ActivityFormValues){\n                    Object.assign(this,init);\n\n            }\n    }\nexport class ActivityFormValues{\n        id ?: string = undefined;\n        title : string= '';\n        category: string = '';\n        description : string ='';\n        date:Date | null = null ;\n        city : string ='';\n        venue : string ='';\n\n        constructor (activity ? : ActivityFormValues){\n                if(activity){\n                        this.id=activity.id;\n                        this.title = activity.title;\n                        this.category = activity.category;\n                        this.description = activity.description;\n                        this.date = activity.date;\n                        this.venue = activity.venue;\n                        this.city = activity.city;\n                }\n        }\n\n}\n ","import { User } from \"./user\";\n\nexport interface Profile{\n    username:string;\n    displayName: string;\n    image?: string ;\n    bio ? : string; \n    followersCount : number;\n    followingCount : number ;\n    following : boolean;\n    photos?:Photo[];\n}\nexport class Profile implements Profile {\n    constructor ( user: User ){\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\nexport  interface Photo {\n    id : string ;\n    url : string ;\n    isMain: boolean;\n}","\nimport {makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\n//import { Pagination } from \"semantic-ui-react\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n//import { parseClassName } from \"react-toastify/dist/utils\";\n\nexport default class ActivityStore\n{\nactivityRegistry = new Map <string,Activity>();\nselectedActivity : Activity | undefined = undefined ;\neditMode = false;  \nloading = false;\nloadingInitial = false;\npagination : Pagination | null = null;\npagingParams = new PagingParams ();\n\nconstructor (){\nmakeAutoObservable(this)\n}\nsetPagingParams = (pagingParams: PagingParams) => {\n    this.pagingParams = pagingParams;\n}\nget axiosParams(){\n    const params = new URLSearchParams();\n    params.append('pagenumber',this.pagingParams.pageNumber.toString());\n    params.append('pageSize', this.pagingParams.pageSize.toString())\n    return params;\n}\nget activitiesByDate()\n{\n    return Array.from(this.activityRegistry.values()).sort((a,b) =>\n    a.date!.getTime() - b.date!.getTime());\n}\nget groupActivities(){\n    return Object.entries (\n        this.activitiesByDate.reduce((activities, activity)=>\n    {\n        const date = format(activity.date!,'dd MMM yyyy');\n        activities[date] =activities[date] ?[...activities[date],activity] :[activity];\n        return activities;\n    },{} as {[keys: string]:Activity[]})\n    )\n}\nloadActivities = async () =>{\n    this.loadingInitial = true;\n    try\n    {\n    const result = await agent.Activities.list(this.axiosParams);\n        result.data.forEach(activity => {\n            this.setActivity(activity);  \n    })\n    this.setPagination(result.pagination);\n    this.setIntialLoading(false);\n    }\n    catch(error)\n    {\n        console.log(error);\n            this.setIntialLoading(false);\n      \n    }\n}\nsetPagination =(pagination : Pagination) =>{\n    this.pagination = pagination;\n}\nloadActivity = async (id :string) =>{\n    let activity = this.getActivity(id);\n    if(activity){\n        this.selectedActivity=activity\n        return activity;\n    }else{\n        this.loadingInitial=true;\n        try{\n            activity= await agent.Activities.details(id);\n            this.setActivity(activity);\n            this.selectedActivity= activity;\n            this.setIntialLoading(false)\n            return activity;\n\n        }catch(error){\n            console.log(error);\n            this.setIntialLoading(false);\n        }\n    }\n}\nprivate setActivity= (activity:Activity)=>{\n    const user = store.userStore.user;\n    if(user){\n         activity.isGoing = activity.attendees?.some(\n             a => a.username ===user.username\n         )\n         activity.isHost = activity.hostUsername===user.username;\n         activity.host = activity.attendees?.find(x=>x.username===activity.hostUsername);\n    }\n    activity.date = new Date(activity.date!);\n    this.activityRegistry.set(activity.id,activity);\n}\nprivate getActivity =(id: string ) =>{\n    return this.activityRegistry.get(id);\n}\nsetIntialLoading=(state : boolean) => {\n    this.loadingInitial = state;\n}\n\ncreateActivity = async (activity: ActivityFormValues)=> {\n    const user = store.userStore.user;\n    const attendee = new Profile(user!);\n     try{\n         await agent.Activities.create(activity);  \n         const newActivity = new Activity(activity);\n         newActivity.hostUsername = user!.username;\n         newActivity.attendees = [attendee];\n         this.setActivity(newActivity);\n         runInAction(()=>{\n           // this.activities.push(activity);\n   this.selectedActivity = newActivity;\n         });\n\n     }\n     catch (error){\n        console.log(error);\n     }\n    }\n\n     updateActivity = async (activity:ActivityFormValues)=>{\n        \n         try{\n            await agent.Activities.update(activity);\n            runInAction(() =>{\n                if(activity.id){\n                    let updateActivity = {...this.getActivity(activity.id),...activity}\n                    this.activityRegistry.set(activity.id, updateActivity as Activity);\n                    this.selectedActivity = updateActivity as Activity;\n                }\n            });\n         }\n         catch(error){\n             console.log(error);\n             runInAction(()=>{this.loading=false})\n         }\n         \n     }\n     deleteActivity = async (id:string)=>{\n         this.loading = true;\n         try{\n             await agent.Activities.delete(id);\n             runInAction(()=>{\n                 this.activityRegistry.delete(id);\n                    //this.activityRegistry.set(activity.id,activity);\n                 this.loading= false;\n\n             })\n         }\n         catch (error){\n             console.log(error);\n             runInAction(()=>{\n                 this.loading= false;\n             })\n\n         }\n\n         }\n         updateAttendance = async ()=>{\n             const user = store.userStore.user;\n             this.loading = true;\n             try {\n                 await agent.Activities.attend(this.selectedActivity!.id);\n                 runInAction(() => { \n                     if(this.selectedActivity?.isGoing)\n                     {\n                         this.selectedActivity.attendees =\n                         this.selectedActivity.attendees?.filter(a=>a.username !== user?.username);\n                         this.selectedActivity.isGoing = false;\n                     }\n                     else \n                     {\n                         const attendee = new Profile(user!);\n                         this.selectedActivity?.attendees?.push(attendee);     \n                        this.selectedActivity!.isGoing = true;              \n                      }\n                 this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n                 })\n             } catch (error) {\n                 console.log(error);\n             }finally {\n                 runInAction(() => this.loading = false);\n             }\n         }\n         cancelActivityToggle = async () => {\n             this.loading = true;\n             try  {\n                 await agent.Activities.attend(this.selectedActivity!.id);\n                 runInAction(() => {\n                     this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                     this.activityRegistry.set(this.selectedActivity!.id,this.selectedActivity!);\n                 })\n\n             }catch(error){\n                 console.log(error)\n             }\n             finally {\n                 runInAction(() => this.loading = false)\n             }\n         }\n         clearSelectedActivity = () => {\n             this.selectedActivity = undefined;\n         }\n         updateAttendeeFollowing = (username: string) => {\n             this.activityRegistry.forEach(activity =>{\n                 activity.attendees.forEach(attendee =>{\n                     if(attendee.username === username){\n                         attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                         attendee.following = ! attendee.following;\n                     }\n                 })\n             })\n         }\n     }\n     \n     \n     \n\n\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile : Profile | null = null;\n    loadingProfile  = false;\n    uploading = false;\n    loading = false;\n    followings : Profile [] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n\n    constructor (){\n        makeAutoObservable(this);\n        reaction(\n            ()=>this.activeTab,\n            activeTab =>{\n                if(activeTab ===3 || activeTab=== 4){\n                    const predicate = activeTab ===3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate)\n                }\n                else{\n                    this.followings=[];\n                }\n            } \n        )\n    } \n    setActiveTab = (activeTab : any) => {\n        this.activeTab = activeTab;\n    }\n    get isCurrentUser()\n    {\n        if(store.userStore.user && this.profile){\n            return store.userStore.user.username === this.profile.username;\n        }\n    }\n    loadProfile  = async (username: string) => {\n        this.loadingProfile = true;\n        try{\n            const profile = await agent.Profiles.get(username);\n            runInAction(()=>{\n                this.profile = profile;\n                this.loadingProfile = false\n\n            })\n        }catch(error){\n            console.log(error);\n            runInAction(()=> this.loadingProfile = false )\n        }\n    }\n    uploadPhoto = async (file: Blob) => {\n        this.uploading= true;\n        try{\n            const response= await agent.Profiles.UploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if(this.profile){\n                    this.profile.photos?.push(photo);\n                    if(photo.isMain && store.userStore.user){\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n\n        }catch(error){\n            runInAction(() =>this.uploading=false);\n\n        }\n        \n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if(this.profile && this.profile.photos)\n                {\n                    this.profile.photos.find(p=>p.isMain)!.isMain= false;\n                    this.profile.photos.find(p=>p.id ===photo.id)!.isMain = true;\n                    this.profile.image= photo.url;\n                    this.loading = false;\n                }\n            })\n                \n\n        }\n        catch(error)\n        {\n            runInAction(()=> this.loading=false)\n            console.log(error);\n        }\n    }\n        deletePhoto = async (photo : Photo) => {\n            this.loading=true;\n            try{\n                await agent.Profiles.deletePhoto(photo.id);\n                runInAction(()=> {\n                    if(this.profile)\n                    this.profile.photos= this.profile.photos?.filter(p=> p.id !==photo.id);\n                    this.loading= false;\n                \n                    \n                })\n\n            }catch(error)\n            {\n                runInAction(()=>this.loading=false)\n                console.log(error);\n            }\n        }\n\n        updateFollowing = async(username : string, following:boolean)=>{\n        this.loading = true;\n        try{\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username!== username){\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if(this.profile && this.profile.username === store.userStore.user?.username){\n                    following ? this.profile.followingCount ++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if(profile.username === username){\n                        profile.following ? profile.followersCount -- : profile.followersCount ++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n\n        }catch(error){\n            console.log(error);\n            runInAction(() => this.loading = false)\n        }\n     }\n        loadFollowings = async (predicate : string)=>{\n            this.loadingFollowings= true;\n            try{\n                const followings = await agent.Profiles.listFollowing(this.profile!.username, predicate);\n                runInAction(()=>{\n                    this.followings = followings;\n                    this.loadingFollowings = false;\n                })\n            }catch(error){\n                console.log(error);\n                runInAction(()=> this.loadingFollowings = false);\n            }\n        }\n    \n}\n ","import { makeAutoObservable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\nimport {history } from \"../../index\";\n\nexport default class UserStore \n{\n    user: User | null = null;\n    constructor (){\n        makeAutoObservable(this)\n    }\n    get isLoggedIn(){\n        return !!this.user;\n    }\n    login = async (creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(()=>this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n            \n            \n        }\n        catch(error){\n            throw error;\n        }\n    }\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n    getUser = async ()=>{\n        try{\n            const user = await agent.Account.current();\n            runInAction(()=> this.user = user);\n        }catch(error){\n            console.log(error);\n        }\n    }\n    register =async(creds:UserFormValues) =>{\n        try{\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(()=>this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        }\n        catch(error){\n            throw error;\n        }\n    }\n    setImage = (image: string) => {\n        if(this.user) this.user.image=image;\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\ninterface Store{\n    activityStore : ActivityStore\n    commonStore : CommonStore;\n    userStore : UserStore;\n    modalStore:ModalStore;\n    profileStore : ProfileStore; \n    commentStore : CommentStore; \n}\nexport const store : Store ={\n\n    activityStore : new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore : new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore : new ProfileStore(),\n    commentStore : new CommentStore()\n}\nexport const StoreContext = createContext(store);\nexport function useStore (){\n    return useContext(StoreContext)\n}\n\n\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore{\n    error:ServerError | null= null;\n    token : string | null = window.localStorage.getItem('jwt');\n    appLoaded=false;\n    constructor(){\n        makeAutoObservable(this);\n        reaction(\n            () => this.token,\n            token=>{\n                if(token){\n                    window.localStorage.setItem('jwt',token);\n                }else{\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n    setServerError = (error: ServerError)=> {\n        this.error = error;\n    }\n    setToken = (token:string |  null) => {\n        if(token) window.localStorage.setItem('jwt',token);\n        this.token= token;\n    }\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\n\ninterface Modal{\n    open:boolean,\n    body:JSX.Element | null;\n}\nexport default class ModalStore{\n    \n    modal:Modal={\n        open : false,\n        body: null\n    }\n    constructor(){\n        makeAutoObservable(this)\n    }\n    openModal = (content:JSX.Element) =>{\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/ comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments : ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n    constructor (){\n        makeAutoObservable(this);\n    }\n    createHubConnection = (activityId: string)  => {\n        if(store.activityStore.selectedActivity)\n        {\n            this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_CHAT_URL +  '?activityId=' + activityId, {\n                accessTokenFactory: () => store.userStore.user?.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n            this.hubConnection.start().catch(error => console.log('Error establishing connection',error));\n            this.hubConnection.on('LoadComments',(comments :ChatComment[]) =>{\n                runInAction(() => {\n                    comments.forEach(comment=>{\n                        comment.createdAt = new Date( comment.createdAt + 'Z')\n\n                    })\n                    this.comments= comments\n                });\n            })\n            this.hubConnection.on('ReceiveComment',(comment: ChatComment)=>{\n                runInAction(()=>{\n                    comment.createdAt = new Date(comment.createdAt);\n                    runInAction(() => this.comments.unshift(comment));\n                })\n               \n            })\n\n        }\n    }\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection',error)); \n    }\n    clearComments = () =>{\n        this.comments =[];\n        this.stopHubConnection();\n    }\n    addComment = async (values : any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try{\n            await this.hubConnection?.invoke('SendComment',values);\n\n        }catch(error){\n            console.log(error);\n            \n        }\n        \n    }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n//import { Event } from 'react-toastify/dist/core';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n//import UserStore from '../stores/userStore';\n\n\nexport default observer(function NavBar(){\n    const {userStore:{user,logout}} = useStore();\n    \n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as ={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as ={NavLink} to='/activities' name ='Activities' />\n                <Menu.Item as ={NavLink} to='/errors' name ='Erros' />\n                <Menu.Item>\n                    <Button as={NavLink} to ='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position ='right'>\n                    {console.log(user?.displayName)}\n                    <Image src ={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing ='top left' text ={user?.username}>\n                        <Dropdown.Menu>\n                        <Dropdown.Item as ={Link} to={`/profiles/${user?.username}`} text='My Profile' icon ='user' />\n                        <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                       \n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n \n        </Menu>\n    )\n} )","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\ninterface Props{\n    inverted ?:boolean;\n    content ?: string;\n}\nexport default function LoadingComponent({inverted= true, content='Loading...'}:Props){\n    return (\n        <Dimmer active ={true} inverted ={inverted}>\n            <Loader content ={content}  />\n        </Dimmer>\n    )\n}","import Calendar from \"react-calendar\";\nimport { Header,Menu } from \"semantic-ui-react\";\nexport default function ActivityFilters(){\n    return(\n        <>\n        <Menu vertical size='large' style = {{width:'100%', marginTop:25}}>\n            <Header icon ='filter' attached color='teal' content='Filters'/>\n            <Menu.Item content='All Activities' />\n            <Menu.Item content='I am going' />\n            <Menu.Item content='I am hosting' />\n\n        </Menu>\n        <Header />\n        <Calendar/>\n        </>\n        \n    );\n}","import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent } from \"react\";\nimport { Button, Reveal } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function FollowButton ({profile}: Props){\n    const {profileStore,userStore} = useStore();\n    const{updateFollowing,loading} = profileStore;\n    if(userStore.user?.username === profile.username) return null;\n    function handleFollow(e: SyntheticEvent, username: string){\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username,true);\n    }  \n\n    return(\n        <Reveal animated='move'>\n                        <Reveal.Content visible style ={{width: '100%'}}>\n                            <Button \n                            fluid \n                            color='teal' \n                            content={profile.following ? 'Following' : 'Not following'}\n                            />\n                        </Reveal.Content>\n                        <Reveal.Content hidden style ={{width: '100%'}}>\n                            <Button \n                            fluid \n                            basic\n                            color={profile.following ? 'red': 'green'}\n                            content={profile.following ? 'Unfollow' : 'Follow'} \n                            loading={loading}\n                            onClick={(e) => handleFollow(e,profile.username)}\n                             />\n                        </Reveal.Content> \n                    </Reveal>\n    )\n})\n","\nimport { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon,Image } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props {\n    profile : Profile;\n}\nexport default observer(function ProfileCard ( { profile}: Props)\n{\n    return(\n        <Card as ={Link} to ={`/profiles/${profile.username}`}>\n        <Image src ={profile.image || '/assets/user.png'} />\n        <Card.Content>\n            <Card.Header>{profile.displayName}</Card.Header>\n            <Card.Description>Bio goes here</Card.Description>\n        </Card.Content>\n        <Card.Content extra >\n            <Icon name ='user' />\n            {profile.followersCount} followers\n        </Card.Content> \n        <FollowButton profile = {profile} />\n        </Card>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Image,List, Popup } from \"semantic-ui-react\";\nimport { Profile } from \"../../../app/models/profile\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\ninterface Props{\n    attendees: Profile[]\n}\nexport default observer (function ActivityListItemAttendee({attendees}:Props){\n    const  styles = {\n        borderColor : 'orange',\n        borderWidth : 3\n    }\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                hoverable\n                key={attendee.username}\n                trigger={\n                    <List.Item key ={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                <Image \n                size='mini' circular src = {attendee.image || '/assets/user.png'} \n                bordered\n                style = {attendee.following ? styles: null}\n                />\n            </List.Item>\n                }\n                > \n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                        \n                    </Popup.Content>\n                </Popup>\n                \n            ))}\n        </List>\n    );\n})","\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\ninterface Props {\nactivity: Activity\n}\nexport default function ActivityListItem ({ activity }: Props ) {\n\n    \n    return(\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                <Label attached ='top' color='red' content ='Cancelled' style ={{textAlign :'center'}}/>\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style ={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as ={Link} to ={`/activities/${activity.id}`}>\n                                {activity.title}\n                                </Item.Header>\n                                <Item.Description>Hosted by<Link to={`/profiles/${activity.hostUsername}`} >{activity.host?.displayName}</Link></Item.Description>\n                                {\n                                activity.isHost && (\n                                    <Item.Description>\n                                        <Label basic color='orange'>\n                                            You are hosting this activity\n                                        </Label>\n                                    </Item.Description>\n                                )}\n                                {\n                                activity.isGoing && !activity.isHost && (\n                                    <Item.Description>\n                                        <Label basic color='green'>\n                                            You are going to this activity\n                                        </Label>\n                                    </Item.Description>\n                                )}\n                                \n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                        <Icon name ='clock' />{format (activity.date!,'dd MMM yyy h:mm aa')}\n                        <Icon name ='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n            <ActivityListItemAttendee  attendees ={activity.attendees! } />\n            </Segment>\n            <Segment clearing>\n                <span>\n                    {activity.description}\n                </span>\n                <Button \n                as={Link} \n                to= {`/activities/${activity.id}`}\n                color ='teal'\n                floated='right'\n                content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}\n  ","\nimport { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header} from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList(){\n    const {activityStore} = useStore();\n    const {groupActivities} = activityStore;\n    return(\n        <>\n        {groupActivities.map(([group,activities])=>(\n            <Fragment key={group}>\n                <Header sub color='teal'>\n                    {group}\n                </Header>\n                {activities.map(activity => (\n                    <ActivityListItem  key={activity.id} activity={activity}/>\n                ))}\n            </Fragment>\n        ))}\n        </>\n        \n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport {Grid, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\n\nimport ActivityList from './ActivityList';\nexport default observer( function ActivityDashboard(){\n    \n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const[loadingNext, setLoadingNext] = useState(false);\n   function handleGetNext(){\n       setLoadingNext(true);\n       setPagingParams(new PagingParams(pagination!.currentPage + 1))\n       loadActivities().then(()=> setLoadingNext(false))\n   }\n  useEffect (()=> {\n   if(activityRegistry.size <= 1) loadActivities();\n  }, [activityRegistry.size,loadActivities]);\n  if(activityStore.loadingInitial && !loadingNext) return <LoadingComponent content ='Loading activities....' />\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                <InfiniteScroll \n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore = {!loadingNext && !!pagination &&  pagination.currentPage < pagination.totalPages}\n                initialLoad={false}\n                >\n                <ActivityList/>\n                </InfiniteScroll>   \n            </Grid.Column>\n            <Grid.Column width='6'>\n            <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    );\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder : string;\n    name :string ;\n    type?: string;\n    label ?: string;\n}\nexport default function MyTextInput(props:Props){\n    const [field,meta] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !! meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ?(\n                <Label basic color='red'>{meta.error}</Label>\n            ):null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nexport default observer(function LoginForm(){\n    const {userStore} = useStore();\n    return ( \n        <Formik initialValues={{email: '',password: '',error: null}} \n        onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error:'Invalid email or password'}))}\n        >     \n            {({handleSubmit,isSubmitting, errors}) => (\n                <Form className ='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as ='h2' content ='Login to Reactivities' color ='teal' textAlign='center' />\n                    <MyTextInput name = 'email' placeholder='Email'/>\n                    <MyTextInput name = 'password' placeholder='Password' type='password'/>\n                    <ErrorMessage\n                    name='error' render={()=><Label style={{marginBottom:10}} basic color='red' content={errors.error} />}\n                    />\n                    <Button  loading ={isSubmitting} positive content ='Login' type='submit' fluid />\n                </Form>\n\n\n            )} \n\n        </Formik>\n\n    );\n})","import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\ninterface Props{\n    errors : any;\n    \n}\nexport default function ValidationErrors ({errors}: Props){\n    return(\n        <Message errors>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any,i:any)=>(\n                        <Message.Item key={i}>{err}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n        \n\n    );\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\nexport default observer(function LoginForm(){\n    const {userStore} = useStore();\n    return ( \n        <Formik initialValues={{displayName :'',username:'',email: '',password: '',error: null}} \n        onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n            setErrors({error}))}\n            validationSchema ={Yup.object({\n                displayName : Yup.string().required(),\n                username : Yup.string().required(),\n                email : Yup.string().required().email(),\n                password : Yup.string().required(),\n            })}\n        >     \n            {({handleSubmit,isSubmitting, errors,isValid,dirty}) => (\n                <Form className ='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as ='h2' content ='Login to Reactivities' color ='teal' textAlign='center' />\n                    <MyTextInput name = 'displayName' placeholder='Display Name'/>\n                    <MyTextInput name = 'username' placeholder='Username'/>\n                    <MyTextInput name = 'email' placeholder='Email'/>\n                    <MyTextInput name = 'password' placeholder='Password' type='password'/>\n                    <ErrorMessage\n                    name='error' render={()=>\n                    <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || ! dirty || isSubmitting} loading ={isSubmitting} positive content ='Login' type='submit' fluid />\n                </Form>\n\n \n            )} \n\n        </Formik>\n\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Segment,Image } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\nexport default observer(function HomePage(){\n    const {userStore,modalStore} = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical  className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt= 'logo' style={{marginBottom:12}} />      \n                    Reactivities\n                 </Header>\n                 {userStore.isLoggedIn? (\n                     <>\n                     <Header  as='h2' inverted content ='Welcome to Reactivities' />\n                     <Button as ={Link} to='/activities' size ='huge' inverted>\n                         Go to Activities\n                     </Button>\n                     </>\n                 ):(\n                     <>\n                     <Button onClick={()=>modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                     </Button>\n                     <Button onClick={()=>modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                     Register!\n              </Button>\n              </>\n                 )}\n                 \n                    \n            </Container>\n            </Segment>\n\n    )\n})","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder : string;\n    name :string ;\n    rows: number;\n    label ?: string;\n}\nexport default function MyTextArea(props:Props){\n    const [field,meta] = useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !! meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ?(\n                <Label basic color='red'>{meta.error}</Label>\n            ):null}\n        </Form.Field>\n    )\n}","import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder : string;\n    name :string ;\n    options: any;\n    label ?: string;\n}\nexport default function MySelectInput(props:Props){\n    const [ field,meta,helpers]= useField(props.name);\n    return(\n        <Form.Field error={meta.touched && !! meta.error}>\n            <label>{props.label}</label>\n            <Select \n            clearable\n            options={props.options}\n            value ={field.value || null}\n            onChange ={(e,d)=> helpers.setValue(d.value)}\n            onBlur={()=> helpers.setTouched(true)}\n            placeholder ={props.placeholder}\n            />\n            {meta.touched && meta.error ?(\n                <Label basic color='red'>{meta.error}</Label>\n            ):null}\n        </Form.Field>\n    )\n}","export const categoryOptions=[\n    {text: 'Drinks', value : 'drinks' },\n    {text: 'Culture', value : 'culture' },\n    {text: 'Film', value : 'film' },\n    {text: 'Food', value : 'food' },\n    {text: 'Music', value : 'Music' },\n    {text: 'Travel', value : 'travek' },\n]","import { useField } from \"formik\";\nimport React from \"react\";\nimport DatePicker,{ReactDatePickerProps} from \"react-datepicker\";\nimport { Form, Label } from \"semantic-ui-react\";\n\nexport default function MyDateInput(props:Partial<ReactDatePickerProps>){\n    const [field,meta,helpers] = useField(props.name!);\n    return(\n        <Form.Field error={meta.touched && !! meta.error}>\n           <DatePicker \n           {...field}\n           {...props}\n           selected={(field.value && new Date(field.value))|| null}\n           onChange ={value=>helpers.setValue(value)}\n           />\n            {meta.touched && meta.error ?(\n                <Label basic color='red'>{meta.error}</Label>\n            ):null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { useEffect} from 'react';\nimport { useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from \"uuid\";\nimport { Formik,Form, } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer( function ActivityForm(){\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const{loadActivity,loadingInitial,updateActivity,createActivity} = activityStore;\n    const {id} = useParams<{id:string}>(); \n    const [activity,setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n \n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        date: Yup.string().required('Date is required').nullable(),\n        category: Yup.string().required(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n   \n    })\n    useEffect(()=>{\n        if(id) loadActivity(id).then(activity=>setActivity(new ActivityFormValues(activity)))\n    },[id,loadActivity])\n   \n    function handleFormSubmit(activity:ActivityFormValues){\n    if(!activity.id){\n        let newActivity={\n            ...activity,\n            id : uuid()\n        };\n        createActivity(newActivity).then(()=> history.push(`/activities/${newActivity.id}`))\n    }\n    else{\n        updateActivity(activity).then(()=> history.push(`/activities/${activity.id}`))\n    }\n    }\n     \nif(loadingInitial) return<LoadingComponent content='Loading activity...' />\n    return(\n        <Segment clearing>\n            <Header content='Activity Details' sub color ='teal' />\n            <Formik \n            validationSchema={validationSchema}\n            enableReinitialize \n            initialValues={activity} \n            onSubmit={values=> handleFormSubmit(values)}>\n                {({isValid, handleSubmit,isSubmitting,dirty})=>(\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <MyTextInput name= 'title' placeholder='Title'/>\n                \n\n                    <MyTextArea rows={3} placeholder=\"Description\"  name ='description' />\n                    <MySelectInput options={categoryOptions} placeholder=\"Category\"  name ='category' />\n                   <MyDateInput\n                   placeholderText='Date'\n                   name='date'\n                   showTimeSelect\n                   timeCaption = 'time'\n                   dateFormat ='MMMM d, yyyy h:mm aa'\n                   />\n                    <Header content='Location Details' sub color ='teal' />\n                    <MyTextInput placeholder=\"City\"  name ='city' />\n                    <MyTextInput placeholder=\"Venue\" name ='venue' />\n                    <Button \n                    disabled={isSubmitting || !dirty || !isValid}\n                    loading ={isSubmitting} \n                    floated =\"right\" \n                    positive type =\"submit\" \n                    content =\"Submit\" />\n                    <Button  as ={Link} to ='/activities' floated =\"right\"  type =\"button\" content =\"cancel\" />\n                </Form>\n                    \n\n                )}\n\n            </Formik>\n            \n            \n        </Segment>\n    );\n})","import { Formik,Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\n//import MyTextArea from '../../../app/common/form/MyTextArea';\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\n//import { formatDistance } from 'date-fns';\nimport { formatDistanceToNow } from 'date-fns/esm';\ninterface Props{\n    activityId : string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId}:Props) {\n    const {commentStore} = useStore();\n    useEffect(() =>{\n        if(activityId)\n        {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    },[commentStore,activityId]);\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            > \n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n            <Formik \nonSubmit={(values,{resetForm })=>\ncommentStore.addComment(values).then(()=>resetForm())}\ninitialValues={{body:''}}\nvalidationSchema ={Yup.object({\n    body: Yup.string().required()\n\n})}\n>\n    {({isSubmitting, isValid, handleSubmit}) => (\n\n                        <Form className='ui form'>\n                      \n                                    <Field name='body'>\n                                        {(props:FieldProps) => (\n                                            <div style={{position: 'relative'}}>\n                                                <Loader active={isSubmitting} />\n                                                <textarea \n                                                placeholder ='Enter your comment (Enter to submit, SHIFT + enter for mew line'\n                                                rows={2}\n                                                {...props.field}\n                                                onKeyPress ={e=> {\n                                                    if(e.key ==='Enter' && e.shiftKey)\n                                                    {\n                                                        return;\n                                                    }\n                                                    if(e.key=== 'Enter' && !e.shiftKey)\n                                                    {\n                                                        e.preventDefault();\n                                                        isValid && handleSubmit();\n                                                    }\n                                                }}\n                                                />\n                                            </div>\n                                        )}\n                                    </Field>\n                                \n                            \n                    </Form>\n    )}\n\n</Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                        <Comment.Content>\n                            <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                {comment.displayName}\n                                </Comment.Author>\n                            <Comment.Metadata>\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                            </Comment.Metadata>\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                        </Comment.Content>\n                    </Comment>\n\n                    ))}\n\n                    \n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore :{updateAttendance, loading,cancelActivityToggle}} = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled &&\n                <Label style ={{position:'absolute',zIndex:1000,left:-14,top:20 }} ribbon color ='red' content =\"Cancelled\"/>\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!,'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                    <Button \n                    color ={activity.isCancelled ? 'green': 'red'} \n                    floated ='left'\n                    basic\n                    content = {activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                    onClick ={cancelActivityToggle}\n                    loading = {loading}\n                    \n                    />\n                     <Button as={Link} \n                     disabled ={activity.isCancelled}\n                     to ={`/manage/${activity.id}`} \n                     color='orange' \n                     floated='right'>\n                     Manage Event\n                 </Button>\n                    </>\n                    \n\n                ): activity.isGoing ? (\n                    <Button loading ={loading} disabled ={activity.isCancelled} onClick ={updateAttendance}>Cancel attendance</Button>\n                ):( \n                    <Button loading ={loading} onClick ={updateAttendance} color='teal'>Join Activity</Button>\n\n                )}\n                \n               \n               \n            </Segment>\n        </Segment.Group>\n    )\n})\n","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\nimport {format} from 'date-fns';\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\ninterface Props{\n    //attendees : Profile [];\n    activity : Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity:{ attendees,host }}: Props ) {\n    if(!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length }{attendees.length===1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                         <Item style={{ position: 'relative' }} key ={attendee.username}>\n                             {\n                             attendee.username === host?.username &&\n                         <Label\n                             style={{ position: 'absolute' }}\n                             color='orange'\n                             ribbon='right'\n                         >\n                             Host\n                         </Label>\n                         }\n                         <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                         <Item.Content verticalAlign='middle'>\n                             <Item.Header as='h3'>\n                                 <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                             </Item.Header>\n                             {attendee.following &&\n                              <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                         </Item.Content>\n                     </Item>\n\n                        \n                    ))}\n                \n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport {useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nexport default observer(function ActivityDetails(){\n  const {activityStore} = useStore();\n  const {selectedActivity:activity,loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n  const {id} = useParams<{id:string}>();\n  useEffect(()=>{\n    if(id) loadActivity(id)\n    return () => clearSelectedActivity();\n  },[id,loadActivity,clearSelectedActivity])\n  if(loadingInitial||!activity) return <LoadingComponent />;\n    return(\n       <Grid>\n         <Grid.Column width={10}>\n          <ActivityDetailedHeader activity={activity}/>\n          <ActivityDetailedInfo activity={activity}/>\n          <ActivityDetailedChat activityId={activity.id} />\n\n         </Grid.Column>\n         <Grid.Column width={6}>\n           <ActivityDetailedSidebar  activity={activity}/>\n           </Grid.Column>\n       </Grid>\n    );\n}) ","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl =  process.env.REACT_APP_API_URL\n    const [errors, setErrors] = useState(null)\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n            <ValidationErrors errors={errors}/>\n            }\n        </>\n    )\n}\n\n\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nexport default function NotFound(){\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search'/>\n                    Oops - we've looked everywhere and cpuld not find this.\n                \n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nexport default observer( function ServerError (){\n    const {commonStore} = useStore();\n    return(\n        <Container>\n            <Header as='hi' content='Server Error' />\n            <Header sub as = 'h5' color='red' content= {commonStore.error?.message} />\n            {commonStore.error?.details &&\n            <Segment>\n                <Header as = 'h4' content='Stack trace' color ='teal' />\n                <code style={{marginTop:'10px'}}>{commonStore.error.details}</code>\n            </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\nexport default observer(function ModalContainer() {\n\nconst {modalStore} = useStore();\nreturn(\n    <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n        <Modal.Content>\n            {modalStore.modal.body}\n        </Modal.Content>\n    </Modal>\n)\n});","import { observer } from \"mobx-react-lite\";\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileCard from \"./ProfileCard\";\nexport default observer(function ProfileFollowing(){\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings,activeTab} = profileStore; \n\n\n    return(\n    \n        <Tab.Pane loading = {loadingFollowings}>\n            <Grid.Column width={16}>\n                <Header  \n                floated ='left' \n                icon='user' \n                  content={activeTab===3?`People following ${profile?.displayName}`: `People ${profile?.displayName} is following`} />\n            </Grid.Column>\n            <Grid.Column width={16}>\n                <Card.Group itemsPerRow ={4}>\n                    {followings.map(profile =>(\n                        <ProfileCard key={profile.username} profile={profile} />\n                    ))}\n                </Card.Group>\n            </Grid.Column>\n        </Tab.Pane>\n\n\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css'\ninterface Props{\n    imagePreview: string;\n    setCropper:(cropper : Cropper) => void;\n}\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props){\n    return (\n        <Cropper\n        src={imagePreview}\n        style ={{height:200, width:'100%'}}\n        initialAspectRatio={1}\n        aspectRatio={1}\n        preview ='.img-preview'\n        guides ={false}\n        viewMode={1}\n        autoCropArea ={1}\n        background={false}\n        onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","\nimport React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\ninterface Props{\n    setFiles :(files: any)=> void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles ={\n        border : 'dashed 3px #eee',\n        borderColor:'#eee',\n        borderRadius :'5px',\n        paddingTop :'30px',\n        textAlign : 'center' as 'center',\n        height:200\n    }\n    const dzActive = {\n        borderColor : 'green'\n    }\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map((file:any)=> Object.assign(file,{\n        preview : URL.createObjectURL(file)\n    })))\n  }, [setFiles])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop image here'/>\n    </div>\n  )\n}","import React from 'react';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\ninterface Props {\n    loading : boolean;\n    uploadPhoto: (file:Blob) => void;\n}\nexport default function PhotoUploadWidget({loading,uploadPhoto} : Props){\n    const[files,setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>(); \n    function onCrop(){\n        if(cropper){\n            cropper.getCroppedCanvas().toBlob(blob =>uploadPhoto(blob!)); \n        }\n    }\n    useEffect (() => {\n        return() => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    },[files])\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles ={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 &&  (    \n                <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview Upload' />\n                {files && files.length > 0 && \n                <>\n                <div className='img-preview' style={{minHeight:200, overflow:'hidden'}} />\n                <Button.Group widths={2}>\n                    <Button loading ={loading}onClick={onCrop} positive icon = 'check' />\n                    <Button disabled={loading} onClick={()=> setFiles([])} positive icon='close' />\n                </Button.Group>\n                </>}\n\n               \n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React, { SyntheticEvent } from \"react\";\nimport { useState } from \"react\";\nimport { Card, Header, Tab, Image, Button, Grid } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\ninterface Props {\n    profile : Profile;\n}\nexport default observer(function ProfilePhotos({profile}: Props){\n    const {profileStore: {isCurrentUser, uploadPhoto,uploading,loading, setMainPhoto, deletePhoto }} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n    function handlePhotoUpload(file:Blob){\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>){\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content = 'Photos' />\n                    {isCurrentUser && (\n                        <Button floated= 'right' basic\n                        content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                        onClick ={() => setAddPhotoMode(!addPhotoMode)} \n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                       <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\n                    ):(\n                        <Card.Group itemsPerRow={5}>\n                        {profile.photos?.map(photo => (\n                            <Card key={photo.id}>\n                            <Image src = {photo.url} />\n                            {isCurrentUser && (\n                                <Button.Group fluid widths={2}>\n                                    <Button \n                                    basic\n                                    color='green'\n                                    content = 'Main'\n                                    name ={'main' +photo.id}\n                                    disabled={photo.isMain}\n                                    loading={target=== 'main'+ photo.id && loading}\n                                    onClick ={e=> handleSetMainPhoto(photo,e)}\n                                    />\n                                    <Button \n                                    basic  \n                                    color='red' \n                                    icon='trash' \n                                    name = {photo.id}\n                                    disabled={photo.isMain}\n                                    onClick ={e=> handleDeletePhoto(photo,e)}\n                                    loading = {target===photo.id && loading }\n                                    />\n\n                                </Button.Group>\n                            )}\n                        </Card>\n                        ))} \n                    </Card.Group>\n                    )}\n                    </Grid.Column>\n\n            </Grid>\n           \n           \n        </Tab.Pane>\n    )\n})","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileFollowing from \"./ProfileFollowing\";\nimport ProfilePhotos from \"./ProfilePhotos\";\ninterface Props{\n    profile: Profile;\n}\nexport default function ProfileContent ({profile}:Props){\n    const{profileStore} = useStore();\n    const panes = [\n        {menuItem : 'About', render : () => <Tab.Pane>About Content </Tab.Pane>},\n        {menuItem : 'Photos', render : () => <ProfilePhotos profile ={profile} />},\n        {menuItem : 'Events', render : () => <Tab.Pane>Events Content </Tab.Pane>},\n        {menuItem : 'Followers', render : () => <ProfileFollowing />},\n        {menuItem : 'Following', render : () => <ProfileFollowing />},\n    \n    ];\n    return (\n        <Tab\n        menu = {{fluid: true,vertical: true}}\n        menuPosition = 'right'\n        panes = {panes} \n        onTabChange= {(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    ) \n}","\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\ninterface Props{\n    profile : Profile;\n}\nexport default observer(function ProfileHeader ({profile}: Props){\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src ={profile.image ||'/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount}/>\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile = {profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n\n    );\n})","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\nexport default observer(function ProfilePage (){\n    const {username} = useParams<{username:string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile,profile,setActiveTab} = profileStore;\n    useEffect(()=> {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    },[loadProfile,username])\n     if(loadingProfile) return <LoadingComponent content='Loading profile...'/>\n    return (\n        <Grid>\n             <Grid.Column width={16}>\n                 {profile &&\n                 <>\n                <ProfileHeader profile={profile} />\n                <ProfileContent profile = {profile}/>\n                </>}\n            </Grid.Column>\n        </Grid>\n    );\n}) ","\nimport {  Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport { Fragment } from 'react';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport {ToastContainer} from 'react-toastify';\nimport NotFound from '../../features/errors/NotFounc';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../models/modalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n  useEffect(()=> {\n    if(commonStore.token){\n      userStore.getUser().finally(()=> commonStore.setAppLoaded());\n    }\n    else{\n      commonStore.setAppLoaded();\n    }\n  },[commonStore,userStore]);\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n  return (\n    <Fragment> \n      <ToastContainer position =\"bottom-right\" hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n      path={'/(.+)'}\n      render ={()=>(\n        <>\n        <NavBar />\n        <Container style={{marginTop: '7em'}}>\n          <Switch>\n                    <Route path='/' exact component={HomePage}></Route>\n        <Route exact path='/activities' component={ActivityDashboard}></Route>\n        <Route path='/activities/:id' component={ActivityDetails}></Route>\n        <Route key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm}></Route>\n        <Route path='/profiles/:username' component={ProfilePage}/>\n        <Route path='/errors' component={TestErrors}/>\n        <Route path='/server-error' component={ServerError}/>\n        <Route path='/login' component={LoginForm}/>\n        <Route component={NotFound} />\n        </Switch>\n\n        </Container>\n        </>\n\n      )}\n      />\n      </Fragment>\n  );\n  //location.key is use to clear al the data from edit form when we navigate fron edit to create.\n}\n\nexport default observer (App); \n ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'; \nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value ={store}>\n    <Router history={history}>\n  <App />\n  </Router>\n  </StoreContext.Provider>,\n  \n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}